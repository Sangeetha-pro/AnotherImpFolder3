Types of SOLID principles
•	SOLID principles are an object-oriented approach that are applied to software structure design.
•	It also ensures that the software is modular, easy to understand, debug, and refactor
 
 The word SOLID acronym for:
1.Single Responsibility Principle (SRP)
2.Open-Closed Principle (OCP)
3.Liskov Substitution Principle (LSP)
4.Interface Segregation Principle (ISP)
5.Dependency Inversion Principle (DIP)

1.Single Responsibility Principle (SRP):
•	The single responsibility principle states that every Java class must perform a single functionality.
•	Implementation of multiple functionalities in a single class mashup the code and if any modification is required may affect the whole class. 
•	It precise the code and the code can be easily maintained.

2.Open-Closed Principle (OCP):
•	Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.
•	This means that new functionality should be added by adding new code instead of changing existing code. 
•	This principle promotes code reuse, reduces the risk of introducing bugs, and makes the code easier to maintain.

3.Liskov Substitution Principle (LSP):
•	It applies to inheritance in such a way that the derived classes must be completely substitutable for their base classes. 
•	In other words, if class A is a subtype of class B, then we should be able to replace B with A without interrupting the behaviour of the program.
•	It extends the open-close principle and also focuses on the behavior of a superclass and its subtypes. We should design the classes to preserve the property unless we have a strong reason to do otherwise.

4.Interface Segregation Principle (ISP):
•	The principle states that the larger interfaces split into smaller ones. Because the implementation classes use only the methods that are required. 
•	We should not force the client to use the methods that they do not want to use.
•	The goal of the interface segregation principle is similar to the single responsibility principle. 
5.Dependency Inversion Principle:
•	High-level modules should not depend on low-level modules. 
•	Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions. 
•	This principle promotes decoupling, which leads to more flexible and scalable code.
The SOLID principles provide a set of guidelines for creating maintainable, flexible, and scalable software. By following these principles, developers can create code that is easier to understand, modify, and extend over time.
